<?php

namespace wpbuddy\rich_snippets;

if ( ! defined( 'ABSPATH' ) ) {
	exit;
} // Exit if accessed directly


/**
 * Class Admin.
 *
 * Starts up all the frontend things.
 *
 * @package wpbuddy\rich_snippets
 *
 * @since   2.0.0
 */
final class Frontend_Controller {

	/**
	 * If debug mode is on|off.
	 *
	 * @since 2.0.0
	 *
	 * @var bool
	 */
	private $debug = false;


	/**
	 * Current post ID.
	 *
	 * @since 2.0.0
	 *
	 * @var int
	 */
	private $current_post_id = 0;


	/**
	 * If Values_Model has been initialized.
	 *
	 * @since 2.2.5
	 *
	 * @var bool
	 */
	private $values_model_initialized = false;


	/**
	 * Magic method for setting upt the class.
	 *
	 * @since 2.0.0
	 */
	public function __construct() {

		$this->debug = defined( 'WPB_RS_DEBUG' ) && WPB_RS_DEBUG;

		if ( ! get_option( base64_decode( 'd3BiX3JzL3ZlcmlmaWVk' ), false ) ) {
			return;
		}

		add_action( 'wp', array( $this, 'set_object_vars' ), 10, 1 );

		if ( (bool) get_option( 'wpb_rs/settings/snippets_in_footer', true ) ) {
			add_action( 'wp_footer', array( $this, 'print_snippets' ) );
			add_action( 'amp_post_template_head', array( $this, 'print_snippets' ) );
		} else {
			add_action( 'wp_head', array( $this, 'print_snippets' ) );
			add_action( 'amp_post_template_footer', array( $this, 'print_snippets' ) );
		}

		add_filter( 'post_class', array( $this, 'remove_hentry' ) );

		add_filter( 'comment_class', array( $this, 'remove_vcard' ) );

		add_action( 'woocommerce_init', array( $this, 'remove_wc_structured_data' ) );

		add_action( 'init', array( $this, 'setup_shortcodes' ) );

		/**
		 * Frontend init hook.
		 *
		 * Allow other plugins to perform any actions.
		 *
		 * @since 2.0.0
		 *
		 * @param Frontend_Controller $frontend
		 *
		 */
		do_action_ref_array( 'wpbuddy/rich_snippets/frontend/init', array( &$this ) );
	}


	/**
	 * Set objects vars of this class.
	 *
	 * @since 2.1.1
	 *
	 * @param \WP $wp
	 */
	public function set_object_vars( $wp ) {

		/**
		 * Fetch the current post ID.
		 */
		$this->current_post_id = Helper_Model::instance()->get_current_post_id();
	}

	/**
	 * Prints the schema.
	 *
	 * @since 2.0.0
	 */
	public function print_snippets() {

		/**
		 * Check for global snippets.
		 */
		if ( $this->have_global_snippets() ) {

			# Run trough all snippets.
			foreach ( $this->get_global_snippet_post_ids() as $global_snippet_post_id ) {

				if ( ! $this->is_global_snippet_active( $global_snippet_post_id ) ) {
					continue;
				}

				$this->print_rich_snippets( $global_snippet_post_id );
			}
		}

		/**
		 * Check for snippets attached to a single post.
		 */
		if ( $this->singular_has_snippet( $this->current_post_id ) ) {
			$this->print_rich_snippets( $this->current_post_id );
		}
	}


	/**
	 * Checks if the current page has any global snippets.
	 *
	 * @since 2.0.0
	 *
	 * @return bool
	 */
	public function have_global_snippets(): bool {

		return count( $this->get_global_snippet_post_ids() ) > 0;
	}


	/**
	 * Returns the global schema post IDs.
	 *
	 * @since 2.0.0
	 *
	 * @return int[] Array with post Ids.
	 */
	public function get_global_snippet_post_ids(): array {

		$cache = get_transient( 'wpb_rs/cache/global_snippets_ids' );

		if ( is_array( $cache ) && ! $this->debug ) {
			return $cache;
		}

		$query = new \WP_Query( array(
			'post_type'      => 'wpb-rs-global',
			'fields'         => 'ids',
			'post_status'    => 'publish',
			'posts_per_page' => - 1,
		) );

		if ( ! $query->have_posts() ) {
			set_transient( 'wpb_rs/cache/global_snippets_ids', array() );

			return array();
		}

		$ids = $query->get_posts();

		set_transient( 'wpb_rs/cache/global_snippets_ids', $ids );

		return $ids;
	}


	/**
	 * Prints rich snippets.
	 *
	 * @param int $post_id The post ID where snippets were defined.
	 *
	 * @since 2.0.0
	 */
	public function print_rich_snippets( int $post_id ) {

		echo '<!--';
		_e(
			'Code generated by SNIP (Structured Data Plugin) for WordPress. See rich-snippets.io for more information.',
			'rich-snippets-schema'
		);
		printf( __( 'Post ID is %d.', 'rich-snippets-schema' ), $post_id );
		echo '-->';

		$cache = get_transient( Cache_Model::get_cache_key() );

		if ( ! $this->debug
		     && is_array( $cache )
		     && isset( $cache[ $post_id ] )
		     && isset( $cache[ $post_id ]['snippets'] )
		     && is_array( $cache[ $post_id ]['snippets'] )
		) {
			echo implode( '', $cache[ $post_id ]['snippets'] );

			return;
		}

		if ( ! $this->values_model_initialized ) {
			# Init value hooks
			new Values_Model();
			$this->values_model_initialized = true;
		}

		# Init custom JSON+LD hooks
		JSONLD_Model::instance();

		$rich_snippets = Snippets_Model::get_snippets( $post_id );

		$cache = ! is_array( $cache ) ? [] : $cache;

		foreach ( $rich_snippets as $snippet_uid => $rich_snippet ) {
			$rich_snippet->prepare_for_output( array(
				'current_post_id' => $this->current_post_id,
				'snippet_post_id' => $post_id,
			) );

			if ( ! $rich_snippet->has_properties() ) {
				continue;
			}

			$output = sprintf(
				'<script data-snippet_id="%s" type="application/ld+json">%s</script>',
				esc_attr( $snippet_uid ),
				$rich_snippet->__toString()
			);

			$cache[ $post_id ]['snippets'][ $snippet_uid ] = $output;

			echo $output;
		}

		set_transient( Cache_Model::get_cache_key(), $cache );

	}


	/**
	 * Checks the rules.
	 *
	 * @since 2.0.0
	 * @since 2.8.0 renamed from is_schema_active()
	 *
	 * @param int $id
	 *
	 * @return bool
	 */
	public function is_global_snippet_active( int $id ): bool {

		$cache_key = Cache_Model::get_cache_key();

		$cache = get_transient( $cache_key );

		if ( ! $this->debug
		     && is_array( $cache )
		     && isset( $cache[ $id ] )
		     && isset( $cache[ $id ]['match_result'] )
		) {
			return boolval( apply_filters( 'wpb_rs/cache/rule_' . $id, $cache[ $id ]['match_result'], true ) );
		}

		$match_result = Rules_Model::get_ruleset( $id )->match();

		$cache[ $id ]['match_result'] = $match_result;

		set_transient( $cache_key, $cache );

		return boolval( apply_filters( 'wpb_rs/cache/rule_' . $id, $match_result, false ) );
	}


	/**
	 * Checks if a singular post has snippets.
	 *
	 * @param int $post_id
	 *
	 * @since 2.0.0
	 *
	 * @return bool
	 */
	public function singular_has_snippet( $post_id ): bool {

		return count( Snippets_Model::get_snippets( $post_id ) ) > 0;
	}


	/**
	 * Removes "hentry" class from post classes.
	 *
	 * @since 2.0.0
	 *
	 * @param array $classes
	 *
	 * @return array
	 */
	public function remove_hentry( $classes ) {

		$k = array_search( 'hentry', $classes );
		if ( false !== $k && (bool) get_option( 'wpb_rs/setting/remove_hentry', true ) ) {
			unset( $classes[ $k ] );
		}

		return $classes;
	}


	/**
	 * Removes vcard CSS classes from comments.
	 *
	 * @since 2.0.0
	 *
	 * @param array $classes
	 *
	 * @return array
	 */
	public function remove_vcard( $classes ) {

		$k = array_search( 'vcard', $classes );
		if ( false !== $k && (bool) get_option( 'wpb_rs/settings/remove_vcard', true ) ) {
			unset( $classes[ $k ] );
		}

		return $classes;
	}


	/**
	 * Maybe deactivates WooCommerce structured data.
	 *
	 * @since 2.0.0
	 */
	public function remove_wc_structured_data() {

		$deactivate = (bool) get_option( 'wpb_rs/setting/remove_wc_schema', false );

		if ( $deactivate ) {
			remove_action( 'wp_footer', array( WC()->structured_data, 'output_structured_data' ), 10 );
		}
	}


	/**
	 * Sets up shortcodes.
	 *
	 * @since 2.2.0
	 */
	public function setup_shortcodes() {


	}

}
